// <auto-generated />
using System;
using BlogApplication.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BlogApp.Data.Migrations
{
    [DbContext(typeof(BlogContext))]
    partial class BlogContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ArticleTeg", b =>
            {
                b.Property<Guid>("ArticlesId")
                    .HasColumnType("uniqueidentifier");

                b.Property<Guid>("tegsId")
                    .HasColumnType("uniqueidentifier");

                b.HasKey("ArticlesId", "tegsId");

                b.HasIndex("tegsId");

                b.ToTable("ArticleTeg");
            });

            modelBuilder.Entity("BlogApp.Data.Model.DataModel.Role", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.HasKey("Id");

                b.ToTable("rolses", (string)null);
            });

            modelBuilder.Entity("BlogApp.Model.DataModel.Article", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier");

                b.Property<string>("Content")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<DateTime>("DateCreated")
                    .HasColumnType("datetime2");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<Guid>("UserId")
                    .HasColumnType("uniqueidentifier");

                b.Property<Guid>("User_Id")
                    .HasColumnType("uniqueidentifier");

                b.HasKey("Id");

                b.HasIndex("UserId");

                b.ToTable("articles", (string)null);
            });

            modelBuilder.Entity("BlogApp.Model.DataModel.Comment", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier");

                b.Property<Guid>("ArticleId")
                    .HasColumnType("uniqueidentifier");

                b.Property<Guid>("Article_Id")
                    .HasColumnType("uniqueidentifier");

                b.Property<string>("Content")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<DateTime>("CreateDate")
                    .HasColumnType("datetime2");

                b.Property<Guid>("User_Id")
                    .HasColumnType("uniqueidentifier");

                b.HasKey("Id");

                b.HasIndex("ArticleId");

                b.HasIndex("User_Id");

                b.ToTable("comment", (string)null);
            });

            modelBuilder.Entity("BlogApp.Model.DataModel.Teg", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier");

                b.Property<DateTime>("Date")
                    .HasColumnType("datetime2");

                b.Property<string>("Value")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.HasKey("Id");

                b.ToTable("tegs", (string)null);
            });

            modelBuilder.Entity("BlogApp.Model.User", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier");

                b.Property<string>("Email")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("FirstName")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("LastName")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Login")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Password")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.HasKey("Id");

                b.ToTable("users", (string)null);
            });

            modelBuilder.Entity("RoleUser", b =>
            {
                b.Property<Guid>("RolesId")
                    .HasColumnType("uniqueidentifier");

                b.Property<Guid>("UsersId")
                    .HasColumnType("uniqueidentifier");

                b.HasKey("RolesId", "UsersId");

                b.HasIndex("UsersId");

                b.ToTable("RoleUser");
            });

            modelBuilder.Entity("ArticleTeg", b =>
            {
                b.HasOne("BlogApp.Model.DataModel.Article", null)
                    .WithMany()
                    .HasForeignKey("ArticlesId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("BlogApp.Model.DataModel.Teg", null)
                    .WithMany()
                    .HasForeignKey("tegsId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("BlogApp.Model.DataModel.Article", b =>
            {
                b.HasOne("BlogApp.Model.User", "User")
                    .WithMany("Articles")
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("User");
            });

            modelBuilder.Entity("BlogApp.Model.DataModel.Comment", b =>
            {
                b.HasOne("BlogApp.Model.DataModel.Article", "Article")
                    .WithMany("Comments")
                    .HasForeignKey("ArticleId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("BlogApp.Model.User", "User")
                    .WithMany("Comments")
                    .HasForeignKey("User_Id");

                b.Navigation("Article");

                b.Navigation("User");
            });

            modelBuilder.Entity("RoleUser", b =>
            {
                b.HasOne("BlogApp.Data.Model.DataModel.Role", null)
                    .WithMany()
                    .HasForeignKey("RolesId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("BlogApp.Model.User", null)
                    .WithMany()
                    .HasForeignKey("UsersId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("BlogApp.Model.DataModel.Article", b =>
            {
                b.Navigation("Comments");
            });

            modelBuilder.Entity("BlogApp.Model.User", b =>
            {
                b.Navigation("Articles");

                b.Navigation("Comments");
            });
#pragma warning restore 612, 618
        }
    }
}
